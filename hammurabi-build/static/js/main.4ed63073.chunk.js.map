{"version":3,"sources":["api.js","PickComments/Comment.js","estimate.js","PickComments/index.js","SelectThread.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["apiurl","getSongs","fetch","then","r","json","Comment","body_html","this","props","data","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","React","Component","outroLen","transitionLen","estimateCommentHtml","comment","str","noTags","replace","trim","splits","split","filter","d","length","words","estimate","estimateComment","PickComments","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","settings","comments","map","enabled","state","current","onSubmit","bind","assertThisInitialized","handle","toggleCurrent","handleKeyEvent","e","console","log","code","goPrev","goNext","window","addEventListener","removeEventListener","setState","filt","onSelection","id","chosen","has","set","add","opt","seconds","fullMins","Math","floor","restSecs","round","slice","mins","concat","commentTimes","b","reduce","getFull","_this2","selectedComments","_estimateCommentHtml","PickComments_Comment","type","checked","onChange","disabled","onClick","style","width","value","max","parseInt","target","toMinSec","calculateTotalTime","Thread","thread","preventDefault","placeholder","autoFocus","Settings","song","songs","changeSong","key","App","stage","question","processed","options","getThread","commentData","questionData","method","body","JSON","stringify","sendToRender","SelectThread","fetchThread","src_PickComments_0","commentsDone","src_Settings","addSettings","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ed63073.chunk.js","sourcesContent":["let apiurl = process.env.NODE_ENV ? 'http://localhost:5566/api' : '/api' // use current web page as host\n\nexport let getThread = function (thread) {\n\treturn fetch(apiurl + '/get-thread/' + thread)\n\t\t.then(r => r.json())\n}\n\nexport let getSongs = function () {\n\treturn fetch(apiurl + '/get-songs')\n\t\t.then(r => r.json())\n}\n\nexport let sendToRender = function (questionData, commentData, options) {\n\treturn fetch(apiurl + '/render-video', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\tquestionData,\n\t\t\tcommentData,\n\t\t\toptions,\n\t\t})\n\t})\n\t\t.then(r => r.json())\n}","import React from 'react'\n\nclass Comment extends React.Component {\n\trender() {\n\t\tlet { body_html } = this.props.data\n\t\treturn (\n\t\t\t<div className=\"Comment\" dangerouslySetInnerHTML={{ __html: body_html }}>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Comment;","// ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 transition.mkv\n\n// Outro 13.163 s\n// Transition 0.843 s\n// Number of splits * X\n// Number of words * Y\n\nlet outroLen = 13.163\nlet transitionLen = 0.843\n\nfunction splitString(str) {\n\treturn str\n\t\t.split(/<br>|(.+?[\\.,?!]+[\"'\\)\\s]+)/g) // eslint-disable-line no-useless-escape\n\t\t.filter(d => d.replace('\\u200B', ' ').trim().length > 0)\n}\n\nexport function getFull(commentTimes) {\n\tlet comments = commentTimes.reduce((a, b) => a + b, 0)\n\treturn comments + outroLen + transitionLen * commentTimes.length\n}\n\nexport function estimateComment(splits, words) {\n\treturn splits * 0.38152203637725923 + words * 0.2767486833003453\n}\n\nexport function estimateCommentHtml(comment) {\n\tlet noTags = comment.replace(/<.+?>/g, '').trim()\n\tlet splits = splitString(noTags).length\n\tlet words = noTags.replace(/<.+?>/g, '').split(/\\s+/g).length\n\tlet estimate = estimateComment(splits, words)\n\n\treturn {\n\t\twords,\n\t\tsplits,\n\t\testimate,\n\t}\n}","import React from 'react'\nimport Comment from './Comment'\nimport './index.css'\nimport { estimateCommentHtml, getFull } from '../estimate';\n\nclass PickComments extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\t// Put the comments into a map for easier indexing later\n\t\tlet settings = props.comments.map((comment) => {\n\t\t\treturn { enabled: false, data: comment }\n\t\t})\n\n\t\tthis.state = { current: 0, settings }\n\t\tthis.onSubmit = this.onSubmit.bind(this)\n\t\tthis.handle = this.handle.bind(this)\n\t\tthis.toggleCurrent = this.toggleCurrent.bind(this)\n\t\tthis.handleKeyEvent = this.handleKeyEvent.bind(this)\n\t}\n\thandleKeyEvent(e) {\n\t\tconsole.log(e.code)\n\t\tswitch (e.code) {\n\t\t\tcase \"KeyA\":\n\t\t\tcase \"ArrowLeft\":\n\t\t\t\tthis.goPrev()\n\t\t\t\tbreak;\n\t\t\tcase \"KeyD\":\n\t\t\tcase \"ArrowRight\":\n\t\t\t\tthis.goNext()\n\t\t\t\tbreak\n\t\t\tcase \"KeyE\":\n\t\t\tcase \"Space\":\n\t\t\t\tthis.toggleCurrent()\n\t\t\t\tbreak\n\t\t\tcase \"Enter\":\n\t\t\t\tthis.onSubmit()\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keydown', this.handleKeyEvent)\n\t}\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener('keydown', this.handleKeyEvent)\n\t}\n\tgoPrev() {\n\t\tif (this.state.current > 0) {\n\t\t\tthis.setState({ current: this.state.current - 1 })\n\t\t}\n\t}\n\tgoNext() {\n\t\tif (this.state.current < this.state.settings.length - 1) {\n\t\t\tthis.setState({ current: this.state.current + 1 })\n\t\t}\n\t}\n\tonSubmit() {\n\t\tlet filt = this.state.settings.filter(d => d.enabled)\n\t\tthis.props.onSelection(filt)\n\t}\n\thandle(id) {\n\t\tif (this.state.chosen.has(id)) {\n\t\t\tthis.state.chosen.set(id)\n\t\t} else {\n\t\t\tthis.state.chosen.add(id)\n\t\t}\n\t\tthis.setState({\n\t\t\tchosen: this.state.chosen,\n\t\t})\n\t}\n\ttoggleCurrent() {\n\t\tlet set = this.state.settings\n\n\t\tlet opt = set[this.state.current]\n\t\topt.enabled = !opt.enabled\n\t\tset[this.state.current] = opt\n\n\t\tconsole.log(set[this.state.current])\n\n\t\tthis.setState({\n\t\t\tsettings: set,\n\t\t})\n\t}\n\ttoMinSec(seconds) {\n\t\tlet fullMins = Math.floor(seconds / 60) // No. full mins\n\t\tlet restSecs = ('00' + Math.round(seconds - 60 * fullMins)).slice(-2)\n\t\tlet mins = ('00' + fullMins).slice(-2)\n\t\treturn `${mins}:${restSecs}`\n\t}\n\tcalculateTotalTime() {\n\t\tlet commentTimes = this.state.settings\n\t\t\t.filter(d => d.enabled)\n\t\t\t.map(d => d.data.body_html)\n\t\t\t.map(b => estimateCommentHtml(b).estimate)\n\t\treturn Math.round(1e2 * getFull(commentTimes)) / 1e2\n\t}\n\trender() {\n\t\t// Settings:\n\t\t// Enable\n\t\t// Keep edits\n\t\tlet comment = this.state.settings[this.state.current].data\n\t\tlet selectedComments = this.state.settings.filter(d => d.enabled).length\n\t\tlet { estimate, words, splits } = estimateCommentHtml(comment.body_html)\n\t\treturn (\n\t\t\t<div className=\"Comments\">\n\t\t\t\t{\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Comment data={comment} />\n\t\t\t\t\t\t<div className=\"options\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={this.state.settings[this.state.current].enabled} onChange={this.toggleCurrent.bind(this)} />\n\t\t\t\t\t\t\t\tEnable\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div>Estimate: {Math.round(1e2 * estimate) / 1e2} s, {words}/{splits}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t\t<button disabled={this.state.current <= 0} onClick={this.goPrev.bind(this)}>Prev</button>\n\t\t\t\t\t\t\t<input style={{ width: 60 }} type=\"number\" value={this.state.current + 1} onChange={e => this.setState({ current: Math.max(0, parseInt(e.target.value) - 1 || 0) })} />\n\t\t\t\t\t\t\t<button disabled={this.state.current > this.state.settings.length} onClick={this.goNext.bind(this)}>Next</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t\t<span>Total time: {this.toMinSec(this.calculateTotalTime())}, {selectedComments} {selectedComments === 1 ? 'comment' : 'comments'} selected</span>\n\t\t\t\t\t\t\t<button onClick={this.onSubmit}>Finish</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default PickComments;","import React from 'react'\n\nclass Thread extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tthread: ''\n\t\t}\n\t}\n\tonSubmit(e) {\n\t\te.preventDefault()\n\t\tthis.props.onSelection(this.state.thread)\n\t}\n\thandle(e) {\n\t\tthis.setState({ thread: e.target.value })\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Thread\">\n\t\t\t\t<h1>Choose a thread</h1>\n\t\t\t\t<form onSubmit={this.onSubmit.bind(this)}>\n\t\t\t\t\t<input value={this.state.thread} onChange={this.handle.bind(this)} placeholder=\"Choose a thread\" autoFocus />\n\t\t\t\t\t<button>OK</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Thread;","import React from 'react'\nimport { getSongs } from './api';\n\nclass Settings extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = { song: null, songs: null }\n\n\t\tgetSongs().then(songs => {\n\t\t\tthis.setState({ songs, song: songs[0] })\n\t\t})\n\t}\n\tonSubmit(e) {\n\t\te.preventDefault()\n\t\tthis.props.onSelection({\n\t\t\tsong: this.state.song,\n\t\t})\n\t}\n\tchangeSong(e) {\n\t\tconsole.log(e.target.value)\n\t}\n\trender() {\n\t\t// Settings:\n\t\t// Song\n\t\t// TODO: dark/light style\n\t\t// TODO: Multiple styles (different channels)\n\n\t\treturn (\n\t\t\t<div className=\"Thread\">\n\t\t\t\t<form onSubmit={this.onSubmit.bind(this)}>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.songs &&\n\t\t\t\t\t\t<select onChange={this.changeSong.bind(this)}>\n\t\t\t\t\t\t\t{this.state.songs.map(song => <option key={song}>{song}</option>)}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t}\n\t\t\t\t\t<br />\n\t\t\t\t\t<button type=\"submit\">Send to the slaughterhouse</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Settings;","import React from 'react';\nimport { getThread, sendToRender } from './api';\nimport './App.css';\nimport PickComments from './PickComments/index';\nimport SelectThread from './SelectThread';\nimport Settings from './Settings';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { stage: 0, comments: [], question: null, processed: null, options: { song: null } }\n\t}\n\tfetchThread(thread) {\n\t\tgetThread(thread)\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tquestion: json[0],\n\t\t\t\t\tcomments: json[1],\n\t\t\t\t\tstage: 1,\n\t\t\t\t})\n\t\t\t})\n\t}\n\tcommentsDone(commentData) {\n\t\tconsole.log(commentData)\n\t\tthis.setState({ processed: commentData, stage: 2 })\n\t}\n\taddSettings(options) {\n\t\tthis.setState({ options, stage: 3 })\n\n\t\tsendToRender(this.state.question, this.state.processed, options)\n\t}\n\trender() {\n\t\tif (this.state.stage === 0) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<SelectThread onSelection={this.fetchThread.bind(this)} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if (this.state.stage === 1) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<PickComments onSelection={this.commentsDone.bind(this)} comments={this.state.comments} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if (this.state.stage === 2) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Settings onSelection={this.addSettings.bind(this)} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if (this.state.stage === 3) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>rendering atm bro</h1>\n\t\t\t\t\t<p>You may close this tab</p>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}